# Authentication & TOTP Flow (login_with_generated_totp.yml):
# Manually Trigger or Schedule:

# The workflow can be manually triggered or scheduled (cron job).
# Checkout & Environment Setup:

# The repository is checked out, and Python (version 3.8) is set up using GitHub Actions.
# Dependencies installed: pyotp and other necessary libraries.
# Generate TOTP:

# TOTP generation using pyotp based on TOTP_SECRET_KEY.
# The generated TOTP is saved as an environment variable.
# Run login.py:

# The login script uses the generated TOTP and environment variables (API key, client code, password, and application ID) to log in to Rupeezy.
# Retrieves the access token.
# Store the Access Token:

# The access token is saved as an artifact (access_token.txt) and uploaded as a GitHub secret for future use.

name: Login with Generated TOTP and Save Access Token to Secrets

on:
  workflow_dispatch:  # Allows manual triggering of the workflow from the Actions tab
  schedule:
    - cron: '45 3 * * 1-5'  # Schedule to run at 9:15 AM IST (3:45 AM UTC) from Monday to Friday

jobs:
  login_and_save_token:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install pyotp requests cryptography

      - name: Generate TOTP
        env:
          TOTP_SECRET_KEY: ${{ secrets.TOTP_SECRET_KEY }}
        run: |
          TOTP=$(python -c 'import pyotp, os; print(pyotp.TOTP(os.getenv("TOTP_SECRET_KEY")).now())')
          echo "TOTP=$TOTP" >> $GITHUB_ENV  # Save TOTP as an environment variable

      - name: Run Login Script and Get Access Token
        id: get_access_token  # Set the ID to reference it later
        env:
          TOTP: ${{ env.TOTP }}  # Use the generated TOTP
          RUPEEZY_API_KEY: ${{ secrets.RUPEEZY_API_KEY }}
          RUPEEZY_CLIENT_CODE: ${{ secrets.RUPEEZY_CLIENT_CODE }}
          RUPEEZY_PASSWORD: ${{ secrets.RUPEEZY_PASSWORD }}
          RUPEEZY_APPLICATION_ID: ${{ secrets.RUPEEZY_APPLICATION_ID }}
        run: |
          token=$(python rupeezy/login.py)
          echo "TOKEN=$token" >> $GITHUB_ENV  # Save token for future steps

      - name: Fetch GitHub Public Key for Encryption
        id: fetch_key
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          curl -H "Authorization: token $GH_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key \
          > public_key.json
          cat public_key.json

      - name: Encrypt Access Token
        id: encrypt_token
        run: |
          pub_key=$(cat public_key.json | jq -r '.key')
          key_id=$(cat public_key.json | jq -r '.key_id')
          echo "KEY_ID=$key_id" >> $GITHUB_ENV
          echo "ENCRYPTED_TOKEN=$(echo -n "$TOKEN" | openssl rsautl -encrypt -pubin -inkey <(echo "$pub_key" | openssl base64 -d) | openssl base64 -e)" >> $GITHUB_ENV

      - name: Update GitHub Secret with Encrypted Access Token
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          ENCRYPTED_TOKEN: ${{ env.ENCRYPTED_TOKEN }}
          KEY_ID: ${{ env.KEY_ID }}
        run: |
          curl -X PUT \
          -H "Authorization: token $GH_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/secrets/RUPEEZY_ACCESS_TOKEN \
          -d '{"encrypted_value": "'"$ENCRYPTED_TOKEN"'", "key_id": "'"$KEY_ID"'"}'

      - name: Run Stock Eligibility and Price Check
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          RUPEEZY_ACCESS_TOKEN: ${{ env.TOKEN }}  # Use the token directly
        run: |
          pip install boto3
          python rupeezy/beest_eligibility_and_price_check.py
