# Authentication & TOTP Flow (login_with_generated_totp.yml):
# Manually Trigger or Schedule:

# The workflow can be manually triggered or scheduled (cron job).
# Checkout & Environment Setup:

# The repository is checked out, and Python (version 3.8) is set up using GitHub Actions.
# Dependencies installed: pyotp and other necessary libraries.
# Generate TOTP:

# TOTP generation using pyotp based on TOTP_SECRET_KEY.
# The generated TOTP is saved as an environment variable.
# Run login.py:

# The login script uses the generated TOTP and environment variables (API key, client code, password, and application ID) to log in to Rupeezy.
# Retrieves the access token.
# Store the Access Token:

# The access token is saved as an artifact (access_token.txt) and uploaded as a GitHub secret for future use.

name: Login with Generated TOTP and Update Stock Eligibility

on:
  workflow_dispatch:  # Allows manual triggering of the workflow from the Actions tab
  schedule:
    - cron: '45 3 * * 1-5'  # Schedule to run at 9:15 AM IST (3:45 AM UTC) from Monday to Friday

jobs:
  login_and_update_eligibility:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install pyotp
          pip install boto3
          pip install requests
          pip install beautifulsoup4
          pip install python-dotenv
          pip install -r requirements.txt

      - name: Generate TOTP
        env:
          TOTP_SECRET_KEY: ${{ secrets.TOTP_SECRET_KEY }}
        run: |
          TOTP=$(python -c 'import pyotp, os; print(pyotp.TOTP(os.getenv("TOTP_SECRET_KEY")).now())')
          echo "Generated TOTP: $TOTP"
          echo "TOTP=$TOTP" >> $GITHUB_ENV  # Save TOTP as an environment variable

      - name: Run Login Script
        env:
          TOTP: ${{ env.TOTP }}  # Use the generated TOTP
          RUPEEZY_API_KEY: ${{ secrets.RUPEEZY_API_KEY }}
          RUPEEZY_CLIENT_CODE: ${{ secrets.RUPEEZY_CLIENT_CODE }}
          RUPEEZY_PASSWORD: ${{ secrets.RUPEEZY_PASSWORD }}
          RUPEEZY_APPLICATION_ID: ${{ secrets.RUPEEZY_APPLICATION_ID }}
        run: |
          python rupeezy/login.py

      - name: Save Access Token as Artifact
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: access_token
          path: access_token.txt

      - name: Authenticate GitHub CLI
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "$PAT_TOKEN" | gh auth login --with-token

      - name: Set GitHub Secret
        env:
          RUPEEZY_ACCESS_TOKEN: ${{ env.RUPEEZY_ACCESS_TOKEN }}  # Use the access token fetched earlier
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          gh secret set RUPEEZY_ACCESS_TOKEN --body "$RUPEEZY_ACCESS_TOKEN"

      - name: Run Stock Eligibility and Price Check
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          RUPEEZY_ACCESS_TOKEN: ${{ secrets.RUPEEZY_ACCESS_TOKEN }}
        run: |
          python rupeezy/beest_eligibility_and_price_check.py
